from typing import Callable, Protocol, Self


class Option[T](Protocol):
    _value: T

    def is_some(self) -> bool:
        ...

    def is_none(self) -> bool:
        ...

    def some(self) -> T | None:
        ...

    def none(self) -> T | None:
        ...

    def some_value(self) -> T | None:
        ...

    def expect(self, _message: str) -> T:
        ...

    def expect_none(self, _message: str) -> None:
        ...

    def unwrap(self) -> T:
        ...

    def unwrap_none(self) -> None:
        ...

    def unwrap_or[U](self, _default: U) -> T | U:
        ...

    def unwrap_or_else[U](self, fn: Callable[[], U]) -> T | U:
        ...

    def unwrap_or_raise[E](self, exc: E) -> T:
        ...

    def map[U](self, fn: Callable[[T], U]) -> Self[T | U]:
        ...

    def map_or[U](self, _default: U, fn: Callable[[T], U]) -> U:
        ...

    def map_or_else[U](self, fn: Callable[[T | None], U]) -> U:
        ...

    def and_then[U](self, fn: Callable[[T], Self[U]]) -> Self[T | U]:
        ...

    def or_else(self, fn: Callable[[], Self[T]]) -> Self[T]:
        ...
