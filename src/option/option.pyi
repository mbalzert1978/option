from typing import Callable, Protocol

class Option[T](Protocol):
    _value: T

    def is_some(self) -> bool: ...
    def is_none(self) -> bool: ...
    def expect(self, _message: str) -> T: ...
    def unwrap(self) -> T: ...
    def unwrap_or[U](self, _default: U) -> T | U: ...
    def unwrap_or_raise[E](self, exc: E) -> T: ...
    def unwrap_or_else[U](self, fn: Callable[[], U]) -> T | U: ...
    def map[U](self, fn: Callable[[T], U]) -> Option[U, None]: ...
    def map_or[U](self, _default: U, fn: Callable[[T], U]) -> U: ...
    def map_or_else[U](self, _default: Callable[[], U], fn: Callable[[T], U]) -> U: ...
    def and_then[U](self, fn: Callable[[T], Option[T, None]]) -> Option[U]: ...
    def or_else(self, fn: Callable[[], Option[T, None]]) -> Option[T]: ...
